---------------------
Registration routines
---------------------

IDL_UicbRegInitTextDone
-----------------------
::

  void IDL_UicbRegInitTextDone(IDL_INIT_TEXT_HANDLER_FUNC proc);
  typedef void (* IDL_INIT_TEXT_HANDLER_FUNC)(void);

called when the initial launch text is finished printing


IDL_UicbRegExitDone
-------------------
::

  void IDL_UicbRegExitDone(IDL_EXITDONE_HANDLER_FUNC proc);
  typedef void (* IDL_EXITDONE_HANDLER_FUNC proc);

called when EXIT is encountered in a routine


IDL_UicbRegShowCompileErr
-------------------------
::

  void IDL_UicbRegShowCompileErr(IDL_SHOWCOMPILEERROR_HANDLER_FUNC proc);
  typedef void (* IDL_SHOWCOMPILEERROR_HANDLER_FUNC proc)(void);

called when a compiler error is discovered, but before the error is printed


IDL_UicbRegPromptChange
-----------------------
::

  void IDL_UicbRegPromptChange(IDL_PROMPTCHANGE_HANDLER_FUNC proc);
  typedef void (* IDL_PROMPTCHANGE_HANDLER_FUNC proc)(IDL_STRING *);

called when !prompt is modified


IDL_UicbRegWorkingDirChange
---------------------------
::

  void IDL_UicbRegWorkingDirChange(IDL_WORKINGDIRCHANGE_HANDLER_FUNC proc);
  typedef void (* IDL_WORKINGDIRCHANGE_HANDLER_FUNC proc)(char *);

called when the current working directory is changed


IDL_UicbRegDeathHint
--------------------
::

  void IDL_UicbRegDeathHint(IDL_DEATHHINT_HANDLER_FUNC proc);
  typedef void (* IDL_DEATHHINT_HANDLER_FUNC proc)(void);


IDL_ObjCallMethodByString
-------------------------
::

  IDL_ObjCallMethodByString;
  

IDL_EzCall
----------
::

  IDL_EzCall;
  
  
IDL_EzCallCleanup
-----------------
::

  IDL_EzCallCleanup;


IDL_CallRoutineByString
-----------------------
::

  IDL_CallRoutineByString;


IDL_CmdLineProcess
------------------
::

  IDL_CmdLineProcess;


IDL_CmdLineCheckUnknown
-----------------------
::

  IDL_CmdLineCheckUnknown;


IDL_ExecuteCommandFromCmdLine
-----------------------------
::

  IDL_ExecuteCommandFromCmdLine;

seems to exit application immediately


IDL_Rbuf_Hide_Timestamp
-----------------------
::

  IDL_Rbuf_Hide_Timestamp;
  

IDL_Rbuf_Unhide_Timestamp
-------------------------
::

  IDL_Rbuf_Unhide_Timestamp;
  

IDL_RbufGetState
----------------
::

  IDL_RbufGetState;
  

IDL_RlineGetState
----------------- 
::

  IDL_RlineGetState;
  

IDL_RbufClear
-------------
::

  IDL_RbufClear;
  

IDL_RbufGetCurrentTimestamp
---------------------------
::

  int IDL_RbufGetCurrentTimestamp();
  

IDL_RbufRecall
--------------
::

  IDL_RbufRecall;
  

IDL_RbufReset
-------------
::

  IDL_RbufReset;


--------------------------
IDL Rline defines/routines
--------------------------

IDL_UicbRegRlineFromKbrd
------------------------
::

  IDL_UicbRegRlineFromKbrd(IDL_UicbRlineFromKbrd_t proc);
  typedef int (* IDL_UicbRlineFromKbrd_t)(int cont, int  widevint);
  
called when a line is needed by the compiler (i.e., when a previous line is continued on the next line with $ or when an OBJ_NEW or OBJ_DESTROY is `.step`'ed into)  

Read strings into s from keyboard using information from the rblk
global variable exported from rline().

entry
     This routine should only be called by rline via
   IDL_UicbRlineFromKbrd(). rblk must be initialized properly.

exit:
     A line of input has been input from the terminal and is stored
     in rblk. It reads characters until the input buffer fills,
     a newline character is read, or an end-of-file condition is
     encountered. The string is terminated with a null character.
   If widevint_allowed is TRUE, it might exit before a complete
   line is input to allow widget events to be processed.

diagnostics:
   Returns one of the IDL_RLINEFROMKBRD_* values as described in
   the description of IDL_UicbRlineFromKbrd().
 
        Routine to be called from rline() for reading from an interactive
        input source. Reads a line of input from the user.
          cont - TRUE if this is a call to continue a previous input
                line, and FALSE if this is the first call for the line.
          widevint_allowed - TRUE if the routine can return without a
                complete line if there is the possibility that widget
                events have arrived, and FALSE if it should block
                until the complete line is in.
        Allowed return values are:
          IDL_RLINEFROMKBRD_EOF (0) - End of file was seen.
          IDL_RLINEFROMKBRD_OK (1) - A line was sucessfully input and
                stored into rblk.
          IDL_RLINEFROMKBRD_WIDEVINT (2) - An incomplete line has been
                input (and possibly stored in rblk although this
                is not required) but window system events have arrived
                and might be processed. This return is only allowed
                if the widevint_allowed argument is TRUE. On the
                next call, the FromKbrd function will be given the
                same rblk, and is expected to pick up the input
                operation where it left off.
 
This is the rline stuff in `idl_export.h`::

  /**** Flags to OR together for options parameter to IDL_RlineRead() ****/
  #define IDL_RLINE_OPT_NOSAVE        1   /* Don't save in recall buffer */
  #define IDL_RLINE_OPT_NOJOURNAL     2   /* Don't journal */
  #define IDL_RLINE_OPT_JOURCMT       4   /* Put a '; ' at start in journal */
  #define IDL_RLINE_OPT_NOEDIT        8   /* Like (!EDIT_INPUT = 0) for one call*/

  extern char *IDL_CDECL IDL_Rline(char *s, IDL_MEMINT n, int unit, FILE
                                   *stream, int is_tty, char *prompt, int opt);
  extern void IDL_CDECL IDL_RlineSetStdinOptions(int opt);

These are in `idl.export`, but not `idl_export.h`::

    IDL_UicbRegRlineDisplayFkeys;
    IDL_UicbRegRlineFromKbrd;
    IDL_UicbRegRlineInterruptWarn;
    IDL_UicbRegRlineRedraw;
    IDL_UicbRegRlineSetFkey;
    